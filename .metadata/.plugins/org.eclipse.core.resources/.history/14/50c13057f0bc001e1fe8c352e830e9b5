/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "stm32f4xx.h"

/* Prototype Function */
void SystemClock_Config(void);
static void GPIO_Init(void);
void delay_ms(uint32_t);

/* Global variable*/

volatile uint32_t msTicks = 0;

/* SysTick interrupt*/
void SysTick_Handler(void)
{
	msTicks++;
}

int main(void)
{
    SystemClock_Config();
    GPIO_Init();
    while (SysTick_Config(SystemCoreClock / 1000) > 0UL);
    /* Loop forever */
	for(;;){
        GPIOD->ODR ^= (1 << 13);
        delay_ms(500);
    }
}

/* Function */

/**
 * The function configures the system clock by enabling the high-speed internal oscillator and enabling
 * the power interface.
 */
void SystemClock_Config(void)
{
    RCC->CR |= RCC_CR_HSION;
    while (!((RCC->CR) & RCC_CR_HSIRDY));

    RCC->APB1ENR |= RCC_APB1ENR_PWREN;    
}

/**
 * The function initializes a GPIO pin on port D as an output with push-pull configuration and no
 * pull-up or pull-down.
 */
static void GPIO_Init(void)
{
    RCC->AHB1ENR |= (1 << 4);               // Enable clock to GPIOD
    GPIOD->MODER |= (1 << 26);              // Configure output
    GPIOD->OTYPER |= ~(1 << 13);            // Configure output mode push-pull
    GPIOD->PUPDR &= ~((1<<27) | (1<<26));   // Configure no pull up or pull down
    GPIOD->ODR |= (1 << 13);
}


void delay_ms(uint32_t delay)
{
    uint32_t expected_ticks = msTicks + delay;
    
	while (msTicks < expected_ticks)
	{
		__asm("NOP");
	}
}
